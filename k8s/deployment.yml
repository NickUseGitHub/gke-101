apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-api
  labels:
    app: node-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node-api
  template:
    metadata:
      labels:
        app: node-api
    spec:
      volumes:
        # If you made a secret as a file you can create a volume from it
        - name: cloudsql-sa-creds
          secret:
            secretName: cloudsql-sa-creds
      containers:
        - name: node-api
          image: asia.gcr.io/gke-101-276011/gke-node:v2
          ports:
            - containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
          env:
            - name: PROJECT_ENV
              valueFrom:
                secretKeyRef:
                  name: gke101-secret
                  key: project_env
            - name: PORT
              valueFrom:
                secretKeyRef:
                  name: gke101-secret
                  key: port
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: gke101-secret
                  key: db_port
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: gke101-secret
                  key: db_host
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: gke101-secret
                  key: db_username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gke101-secret
                  key: db_password
            - name: DB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: gke101-secret
                  key: db_database
        # - image: gcr.io/cloudsql-docker/gce-proxy:1.11
        #   name: cloudsql-proxy
        #   ports:
        #     - containerPort: 5432
        #   # You can make environment variables from GKE configurations
        #   # You can read them from a configmap directly with configMapKeyRef
        #   env:
        #     - name: INSTANCE_CONNECTION
        #       valueFrom:
        #         configMapKeyRef:
        #           name: sql-connection
        #           key: connectionname
        #   command: [
        #       '/cloud_sql_proxy',
        #       '-instances=$(INSTANCE_CONNECTION)=tcp:5432',
        #       # We are accessing the secret file inside the volume.
        #       # In most circumstances you would use environment variables but
        #       # the Cloud SQL Proxy container wants a file so we give it one
        #       '-credential_file=/secrets/cloudsql/credentials.json',
        #     ]
        #   # Once the volume is made earlier in the file you then mount the
        #   # volume so you can access the secret file inside it
        #   volumeMounts:
        #     - name: cloudsql-sa-creds
        #       mountPath: /secrets/cloudsql
        #       readOnly: true

---
apiVersion: v1
kind: Service
metadata:
  name: node-api-service
spec:
  type: NodePort
  selector:
    app: node-api
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
